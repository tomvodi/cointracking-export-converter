// Code generated by MockGen. DO NOT EDIT.
// Source: AppContext.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAppContext is a mock of AppContext interface.
type MockAppContext struct {
	ctrl     *gomock.Controller
	recorder *MockAppContextMockRecorder
}

// MockAppContextMockRecorder is the mock recorder for MockAppContext.
type MockAppContextMockRecorder struct {
	mock *MockAppContext
}

// NewMockAppContext creates a new mock instance.
func NewMockAppContext(ctrl *gomock.Controller) *MockAppContext {
	mock := &MockAppContext{ctrl: ctrl}
	mock.recorder = &MockAppContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppContext) EXPECT() *MockAppContextMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockAppContext) Context() (context.Context, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Context indicates an expected call of Context.
func (mr *MockAppContextMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockAppContext)(nil).Context))
}

// SetContext mocks base method.
func (m *MockAppContext) SetContext(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetContext", ctx)
}

// SetContext indicates an expected call of SetContext.
func (mr *MockAppContextMockRecorder) SetContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContext", reflect.TypeOf((*MockAppContext)(nil).SetContext), ctx)
}
