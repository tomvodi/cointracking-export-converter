// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// XMLFile is an autogenerated mock type for the XMLFile type
type XMLFile struct {
	mock.Mock
}

type XMLFile_Expecter struct {
	mock *mock.Mock
}

func (_m *XMLFile) EXPECT() *XMLFile_Expecter {
	return &XMLFile_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *XMLFile) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// XMLFile_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type XMLFile_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *XMLFile_Expecter) Close() *XMLFile_Close_Call {
	return &XMLFile_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *XMLFile_Close_Call) Run(run func()) *XMLFile_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *XMLFile_Close_Call) Return(_a0 error) *XMLFile_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *XMLFile_Close_Call) RunAndReturn(run func() error) *XMLFile_Close_Call {
	_c.Call.Return(run)
	return _c
}

// SaveAs provides a mock function with given fields: filePath
func (_m *XMLFile) SaveAs(filePath string) error {
	ret := _m.Called(filePath)

	if len(ret) == 0 {
		panic("no return value specified for SaveAs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(filePath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// XMLFile_SaveAs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveAs'
type XMLFile_SaveAs_Call struct {
	*mock.Call
}

// SaveAs is a helper method to define mock.On call
//   - filePath string
func (_e *XMLFile_Expecter) SaveAs(filePath interface{}) *XMLFile_SaveAs_Call {
	return &XMLFile_SaveAs_Call{Call: _e.mock.On("SaveAs", filePath)}
}

func (_c *XMLFile_SaveAs_Call) Run(run func(filePath string)) *XMLFile_SaveAs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *XMLFile_SaveAs_Call) Return(_a0 error) *XMLFile_SaveAs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *XMLFile_SaveAs_Call) RunAndReturn(run func(string) error) *XMLFile_SaveAs_Call {
	_c.Call.Return(run)
	return _c
}

// SetSheetHeader provides a mock function with given fields: sheetNr, headers
func (_m *XMLFile) SetSheetHeader(sheetNr int, headers []string) error {
	ret := _m.Called(sheetNr, headers)

	if len(ret) == 0 {
		panic("no return value specified for SetSheetHeader")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, []string) error); ok {
		r0 = rf(sheetNr, headers)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// XMLFile_SetSheetHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSheetHeader'
type XMLFile_SetSheetHeader_Call struct {
	*mock.Call
}

// SetSheetHeader is a helper method to define mock.On call
//   - sheetNr int
//   - headers []string
func (_e *XMLFile_Expecter) SetSheetHeader(sheetNr interface{}, headers interface{}) *XMLFile_SetSheetHeader_Call {
	return &XMLFile_SetSheetHeader_Call{Call: _e.mock.On("SetSheetHeader", sheetNr, headers)}
}

func (_c *XMLFile_SetSheetHeader_Call) Run(run func(sheetNr int, headers []string)) *XMLFile_SetSheetHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].([]string))
	})
	return _c
}

func (_c *XMLFile_SetSheetHeader_Call) Return(_a0 error) *XMLFile_SetSheetHeader_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *XMLFile_SetSheetHeader_Call) RunAndReturn(run func(int, []string) error) *XMLFile_SetSheetHeader_Call {
	_c.Call.Return(run)
	return _c
}

// SetSheetRow provides a mock function with given fields: sheetNr, rowNr, data
func (_m *XMLFile) SetSheetRow(sheetNr int, rowNr int, data []interface{}) error {
	ret := _m.Called(sheetNr, rowNr, data)

	if len(ret) == 0 {
		panic("no return value specified for SetSheetRow")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, []interface{}) error); ok {
		r0 = rf(sheetNr, rowNr, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// XMLFile_SetSheetRow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSheetRow'
type XMLFile_SetSheetRow_Call struct {
	*mock.Call
}

// SetSheetRow is a helper method to define mock.On call
//   - sheetNr int
//   - rowNr int
//   - data []interface{}
func (_e *XMLFile_Expecter) SetSheetRow(sheetNr interface{}, rowNr interface{}, data interface{}) *XMLFile_SetSheetRow_Call {
	return &XMLFile_SetSheetRow_Call{Call: _e.mock.On("SetSheetRow", sheetNr, rowNr, data)}
}

func (_c *XMLFile_SetSheetRow_Call) Run(run func(sheetNr int, rowNr int, data []interface{})) *XMLFile_SetSheetRow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int), args[2].([]interface{}))
	})
	return _c
}

func (_c *XMLFile_SetSheetRow_Call) Return(_a0 error) *XMLFile_SetSheetRow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *XMLFile_SetSheetRow_Call) RunAndReturn(run func(int, int, []interface{}) error) *XMLFile_SetSheetRow_Call {
	_c.Call.Return(run)
	return _c
}

// NewXMLFile creates a new instance of XMLFile. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewXMLFile(t interface {
	mock.TestingT
	Cleanup(func())
}) *XMLFile {
	mock := &XMLFile{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
