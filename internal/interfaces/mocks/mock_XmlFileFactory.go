// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	interfaces "github.com/tomvodi/cointracking-export-converter/internal/interfaces"
)

// XmlFileFactory is an autogenerated mock type for the XmlFileFactory type
type XmlFileFactory struct {
	mock.Mock
}

type XmlFileFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *XmlFileFactory) EXPECT() *XmlFileFactory_Expecter {
	return &XmlFileFactory_Expecter{mock: &_m.Mock}
}

// NewXmlFile provides a mock function with given fields:
func (_m *XmlFileFactory) NewXmlFile() interfaces.XmlFile {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NewXmlFile")
	}

	var r0 interfaces.XmlFile
	if rf, ok := ret.Get(0).(func() interfaces.XmlFile); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.XmlFile)
		}
	}

	return r0
}

// XmlFileFactory_NewXmlFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewXmlFile'
type XmlFileFactory_NewXmlFile_Call struct {
	*mock.Call
}

// NewXmlFile is a helper method to define mock.On call
func (_e *XmlFileFactory_Expecter) NewXmlFile() *XmlFileFactory_NewXmlFile_Call {
	return &XmlFileFactory_NewXmlFile_Call{Call: _e.mock.On("NewXmlFile")}
}

func (_c *XmlFileFactory_NewXmlFile_Call) Run(run func()) *XmlFileFactory_NewXmlFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *XmlFileFactory_NewXmlFile_Call) Return(_a0 interfaces.XmlFile) *XmlFileFactory_NewXmlFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *XmlFileFactory_NewXmlFile_Call) RunAndReturn(run func() interfaces.XmlFile) *XmlFileFactory_NewXmlFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewXmlFileFactory creates a new instance of XmlFileFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewXmlFileFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *XmlFileFactory {
	mock := &XmlFileFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
