// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	common "github.com/tomvodi/cointracking-export-converter/internal/common"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// CointrackingCsvReader is an autogenerated mock type for the CointrackingCsvReader type
type CointrackingCsvReader struct {
	mock.Mock
}

type CointrackingCsvReader_Expecter struct {
	mock *mock.Mock
}

func (_m *CointrackingCsvReader) EXPECT() *CointrackingCsvReader_Expecter {
	return &CointrackingCsvReader_Expecter{mock: &_m.Mock}
}

// ReadFile provides a mock function with given fields: filepath, loc, existingTxIds
func (_m *CointrackingCsvReader) ReadFile(filepath string, loc *time.Location, existingTxIds []string) (*common.ExportFileInfo, error) {
	ret := _m.Called(filepath, loc, existingTxIds)

	if len(ret) == 0 {
		panic("no return value specified for ReadFile")
	}

	var r0 *common.ExportFileInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *time.Location, []string) (*common.ExportFileInfo, error)); ok {
		return rf(filepath, loc, existingTxIds)
	}
	if rf, ok := ret.Get(0).(func(string, *time.Location, []string) *common.ExportFileInfo); ok {
		r0 = rf(filepath, loc, existingTxIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.ExportFileInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *time.Location, []string) error); ok {
		r1 = rf(filepath, loc, existingTxIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CointrackingCsvReader_ReadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadFile'
type CointrackingCsvReader_ReadFile_Call struct {
	*mock.Call
}

// ReadFile is a helper method to define mock.On call
//   - filepath string
//   - loc *time.Location
//   - existingTxIds []string
func (_e *CointrackingCsvReader_Expecter) ReadFile(filepath interface{}, loc interface{}, existingTxIds interface{}) *CointrackingCsvReader_ReadFile_Call {
	return &CointrackingCsvReader_ReadFile_Call{Call: _e.mock.On("ReadFile", filepath, loc, existingTxIds)}
}

func (_c *CointrackingCsvReader_ReadFile_Call) Run(run func(filepath string, loc *time.Location, existingTxIds []string)) *CointrackingCsvReader_ReadFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*time.Location), args[2].([]string))
	})
	return _c
}

func (_c *CointrackingCsvReader_ReadFile_Call) Return(_a0 *common.ExportFileInfo, _a1 error) *CointrackingCsvReader_ReadFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CointrackingCsvReader_ReadFile_Call) RunAndReturn(run func(string, *time.Location, []string) (*common.ExportFileInfo, error)) *CointrackingCsvReader_ReadFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewCointrackingCsvReader creates a new instance of CointrackingCsvReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCointrackingCsvReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *CointrackingCsvReader {
	mock := &CointrackingCsvReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
