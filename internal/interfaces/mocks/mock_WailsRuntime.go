// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	frontend "github.com/wailsapp/wails/v2/pkg/runtime"

	mock "github.com/stretchr/testify/mock"
)

// WailsRuntime is an autogenerated mock type for the WailsRuntime type
type WailsRuntime struct {
	mock.Mock
}

type WailsRuntime_Expecter struct {
	mock *mock.Mock
}

func (_m *WailsRuntime) EXPECT() *WailsRuntime_Expecter {
	return &WailsRuntime_Expecter{mock: &_m.Mock}
}

// EventsEmit provides a mock function with given fields: eventName, optionalData
func (_m *WailsRuntime) EventsEmit(eventName string, optionalData ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, eventName)
	_ca = append(_ca, optionalData...)
	_m.Called(_ca...)
}

// WailsRuntime_EventsEmit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EventsEmit'
type WailsRuntime_EventsEmit_Call struct {
	*mock.Call
}

// EventsEmit is a helper method to define mock.On call
//   - eventName string
//   - optionalData ...interface{}
func (_e *WailsRuntime_Expecter) EventsEmit(eventName interface{}, optionalData ...interface{}) *WailsRuntime_EventsEmit_Call {
	return &WailsRuntime_EventsEmit_Call{Call: _e.mock.On("EventsEmit",
		append([]interface{}{eventName}, optionalData...)...)}
}

func (_c *WailsRuntime_EventsEmit_Call) Run(run func(eventName string, optionalData ...interface{})) *WailsRuntime_EventsEmit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *WailsRuntime_EventsEmit_Call) Return() *WailsRuntime_EventsEmit_Call {
	_c.Call.Return()
	return _c
}

func (_c *WailsRuntime_EventsEmit_Call) RunAndReturn(run func(string, ...interface{})) *WailsRuntime_EventsEmit_Call {
	_c.Call.Return(run)
	return _c
}

// OpenFileDialog provides a mock function with given fields: dialogOptions
func (_m *WailsRuntime) OpenFileDialog(dialogOptions frontend.OpenDialogOptions) (string, error) {
	ret := _m.Called(dialogOptions)

	if len(ret) == 0 {
		panic("no return value specified for OpenFileDialog")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(frontend.OpenDialogOptions) (string, error)); ok {
		return rf(dialogOptions)
	}
	if rf, ok := ret.Get(0).(func(frontend.OpenDialogOptions) string); ok {
		r0 = rf(dialogOptions)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(frontend.OpenDialogOptions) error); ok {
		r1 = rf(dialogOptions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WailsRuntime_OpenFileDialog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenFileDialog'
type WailsRuntime_OpenFileDialog_Call struct {
	*mock.Call
}

// OpenFileDialog is a helper method to define mock.On call
//   - dialogOptions frontend.OpenDialogOptions
func (_e *WailsRuntime_Expecter) OpenFileDialog(dialogOptions interface{}) *WailsRuntime_OpenFileDialog_Call {
	return &WailsRuntime_OpenFileDialog_Call{Call: _e.mock.On("OpenFileDialog", dialogOptions)}
}

func (_c *WailsRuntime_OpenFileDialog_Call) Run(run func(dialogOptions frontend.OpenDialogOptions)) *WailsRuntime_OpenFileDialog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(frontend.OpenDialogOptions))
	})
	return _c
}

func (_c *WailsRuntime_OpenFileDialog_Call) Return(_a0 string, _a1 error) *WailsRuntime_OpenFileDialog_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WailsRuntime_OpenFileDialog_Call) RunAndReturn(run func(frontend.OpenDialogOptions) (string, error)) *WailsRuntime_OpenFileDialog_Call {
	_c.Call.Return(run)
	return _c
}

// SaveFileDialog provides a mock function with given fields: dialogOptions
func (_m *WailsRuntime) SaveFileDialog(dialogOptions frontend.SaveDialogOptions) (string, error) {
	ret := _m.Called(dialogOptions)

	if len(ret) == 0 {
		panic("no return value specified for SaveFileDialog")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(frontend.SaveDialogOptions) (string, error)); ok {
		return rf(dialogOptions)
	}
	if rf, ok := ret.Get(0).(func(frontend.SaveDialogOptions) string); ok {
		r0 = rf(dialogOptions)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(frontend.SaveDialogOptions) error); ok {
		r1 = rf(dialogOptions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WailsRuntime_SaveFileDialog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveFileDialog'
type WailsRuntime_SaveFileDialog_Call struct {
	*mock.Call
}

// SaveFileDialog is a helper method to define mock.On call
//   - dialogOptions frontend.SaveDialogOptions
func (_e *WailsRuntime_Expecter) SaveFileDialog(dialogOptions interface{}) *WailsRuntime_SaveFileDialog_Call {
	return &WailsRuntime_SaveFileDialog_Call{Call: _e.mock.On("SaveFileDialog", dialogOptions)}
}

func (_c *WailsRuntime_SaveFileDialog_Call) Run(run func(dialogOptions frontend.SaveDialogOptions)) *WailsRuntime_SaveFileDialog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(frontend.SaveDialogOptions))
	})
	return _c
}

func (_c *WailsRuntime_SaveFileDialog_Call) Return(_a0 string, _a1 error) *WailsRuntime_SaveFileDialog_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WailsRuntime_SaveFileDialog_Call) RunAndReturn(run func(frontend.SaveDialogOptions) (string, error)) *WailsRuntime_SaveFileDialog_Call {
	_c.Call.Return(run)
	return _c
}

// NewWailsRuntime creates a new instance of WailsRuntime. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWailsRuntime(t interface {
	mock.TestingT
	Cleanup(func())
}) *WailsRuntime {
	mock := &WailsRuntime{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
