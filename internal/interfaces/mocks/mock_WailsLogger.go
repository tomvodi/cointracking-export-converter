// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// WailsLogger is an autogenerated mock type for the WailsLogger type
type WailsLogger struct {
	mock.Mock
}

type WailsLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *WailsLogger) EXPECT() *WailsLogger_Expecter {
	return &WailsLogger_Expecter{mock: &_m.Mock}
}

// LogDebug provides a mock function with given fields: ctx, message
func (_m *WailsLogger) LogDebug(ctx context.Context, message string) {
	_m.Called(ctx, message)
}

// WailsLogger_LogDebug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogDebug'
type WailsLogger_LogDebug_Call struct {
	*mock.Call
}

// LogDebug is a helper method to define mock.On call
//   - ctx context.Context
//   - message string
func (_e *WailsLogger_Expecter) LogDebug(ctx interface{}, message interface{}) *WailsLogger_LogDebug_Call {
	return &WailsLogger_LogDebug_Call{Call: _e.mock.On("LogDebug", ctx, message)}
}

func (_c *WailsLogger_LogDebug_Call) Run(run func(ctx context.Context, message string)) *WailsLogger_LogDebug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *WailsLogger_LogDebug_Call) Return() *WailsLogger_LogDebug_Call {
	_c.Call.Return()
	return _c
}

func (_c *WailsLogger_LogDebug_Call) RunAndReturn(run func(context.Context, string)) *WailsLogger_LogDebug_Call {
	_c.Call.Return(run)
	return _c
}

// LogDebugf provides a mock function with given fields: ctx, format, args
func (_m *WailsLogger) LogDebugf(ctx context.Context, format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// WailsLogger_LogDebugf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogDebugf'
type WailsLogger_LogDebugf_Call struct {
	*mock.Call
}

// LogDebugf is a helper method to define mock.On call
//   - ctx context.Context
//   - format string
//   - args ...interface{}
func (_e *WailsLogger_Expecter) LogDebugf(ctx interface{}, format interface{}, args ...interface{}) *WailsLogger_LogDebugf_Call {
	return &WailsLogger_LogDebugf_Call{Call: _e.mock.On("LogDebugf",
		append([]interface{}{ctx, format}, args...)...)}
}

func (_c *WailsLogger_LogDebugf_Call) Run(run func(ctx context.Context, format string, args ...interface{})) *WailsLogger_LogDebugf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *WailsLogger_LogDebugf_Call) Return() *WailsLogger_LogDebugf_Call {
	_c.Call.Return()
	return _c
}

func (_c *WailsLogger_LogDebugf_Call) RunAndReturn(run func(context.Context, string, ...interface{})) *WailsLogger_LogDebugf_Call {
	_c.Call.Return(run)
	return _c
}

// LogError provides a mock function with given fields: ctx, message
func (_m *WailsLogger) LogError(ctx context.Context, message string) {
	_m.Called(ctx, message)
}

// WailsLogger_LogError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogError'
type WailsLogger_LogError_Call struct {
	*mock.Call
}

// LogError is a helper method to define mock.On call
//   - ctx context.Context
//   - message string
func (_e *WailsLogger_Expecter) LogError(ctx interface{}, message interface{}) *WailsLogger_LogError_Call {
	return &WailsLogger_LogError_Call{Call: _e.mock.On("LogError", ctx, message)}
}

func (_c *WailsLogger_LogError_Call) Run(run func(ctx context.Context, message string)) *WailsLogger_LogError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *WailsLogger_LogError_Call) Return() *WailsLogger_LogError_Call {
	_c.Call.Return()
	return _c
}

func (_c *WailsLogger_LogError_Call) RunAndReturn(run func(context.Context, string)) *WailsLogger_LogError_Call {
	_c.Call.Return(run)
	return _c
}

// LogErrorf provides a mock function with given fields: ctx, format, args
func (_m *WailsLogger) LogErrorf(ctx context.Context, format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// WailsLogger_LogErrorf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogErrorf'
type WailsLogger_LogErrorf_Call struct {
	*mock.Call
}

// LogErrorf is a helper method to define mock.On call
//   - ctx context.Context
//   - format string
//   - args ...interface{}
func (_e *WailsLogger_Expecter) LogErrorf(ctx interface{}, format interface{}, args ...interface{}) *WailsLogger_LogErrorf_Call {
	return &WailsLogger_LogErrorf_Call{Call: _e.mock.On("LogErrorf",
		append([]interface{}{ctx, format}, args...)...)}
}

func (_c *WailsLogger_LogErrorf_Call) Run(run func(ctx context.Context, format string, args ...interface{})) *WailsLogger_LogErrorf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *WailsLogger_LogErrorf_Call) Return() *WailsLogger_LogErrorf_Call {
	_c.Call.Return()
	return _c
}

func (_c *WailsLogger_LogErrorf_Call) RunAndReturn(run func(context.Context, string, ...interface{})) *WailsLogger_LogErrorf_Call {
	_c.Call.Return(run)
	return _c
}

// LogFatal provides a mock function with given fields: ctx, message
func (_m *WailsLogger) LogFatal(ctx context.Context, message string) {
	_m.Called(ctx, message)
}

// WailsLogger_LogFatal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogFatal'
type WailsLogger_LogFatal_Call struct {
	*mock.Call
}

// LogFatal is a helper method to define mock.On call
//   - ctx context.Context
//   - message string
func (_e *WailsLogger_Expecter) LogFatal(ctx interface{}, message interface{}) *WailsLogger_LogFatal_Call {
	return &WailsLogger_LogFatal_Call{Call: _e.mock.On("LogFatal", ctx, message)}
}

func (_c *WailsLogger_LogFatal_Call) Run(run func(ctx context.Context, message string)) *WailsLogger_LogFatal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *WailsLogger_LogFatal_Call) Return() *WailsLogger_LogFatal_Call {
	_c.Call.Return()
	return _c
}

func (_c *WailsLogger_LogFatal_Call) RunAndReturn(run func(context.Context, string)) *WailsLogger_LogFatal_Call {
	_c.Call.Return(run)
	return _c
}

// LogFatalf provides a mock function with given fields: ctx, format, args
func (_m *WailsLogger) LogFatalf(ctx context.Context, format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// WailsLogger_LogFatalf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogFatalf'
type WailsLogger_LogFatalf_Call struct {
	*mock.Call
}

// LogFatalf is a helper method to define mock.On call
//   - ctx context.Context
//   - format string
//   - args ...interface{}
func (_e *WailsLogger_Expecter) LogFatalf(ctx interface{}, format interface{}, args ...interface{}) *WailsLogger_LogFatalf_Call {
	return &WailsLogger_LogFatalf_Call{Call: _e.mock.On("LogFatalf",
		append([]interface{}{ctx, format}, args...)...)}
}

func (_c *WailsLogger_LogFatalf_Call) Run(run func(ctx context.Context, format string, args ...interface{})) *WailsLogger_LogFatalf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *WailsLogger_LogFatalf_Call) Return() *WailsLogger_LogFatalf_Call {
	_c.Call.Return()
	return _c
}

func (_c *WailsLogger_LogFatalf_Call) RunAndReturn(run func(context.Context, string, ...interface{})) *WailsLogger_LogFatalf_Call {
	_c.Call.Return(run)
	return _c
}

// LogInfo provides a mock function with given fields: ctx, message
func (_m *WailsLogger) LogInfo(ctx context.Context, message string) {
	_m.Called(ctx, message)
}

// WailsLogger_LogInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogInfo'
type WailsLogger_LogInfo_Call struct {
	*mock.Call
}

// LogInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - message string
func (_e *WailsLogger_Expecter) LogInfo(ctx interface{}, message interface{}) *WailsLogger_LogInfo_Call {
	return &WailsLogger_LogInfo_Call{Call: _e.mock.On("LogInfo", ctx, message)}
}

func (_c *WailsLogger_LogInfo_Call) Run(run func(ctx context.Context, message string)) *WailsLogger_LogInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *WailsLogger_LogInfo_Call) Return() *WailsLogger_LogInfo_Call {
	_c.Call.Return()
	return _c
}

func (_c *WailsLogger_LogInfo_Call) RunAndReturn(run func(context.Context, string)) *WailsLogger_LogInfo_Call {
	_c.Call.Return(run)
	return _c
}

// LogInfof provides a mock function with given fields: ctx, format, args
func (_m *WailsLogger) LogInfof(ctx context.Context, format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// WailsLogger_LogInfof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogInfof'
type WailsLogger_LogInfof_Call struct {
	*mock.Call
}

// LogInfof is a helper method to define mock.On call
//   - ctx context.Context
//   - format string
//   - args ...interface{}
func (_e *WailsLogger_Expecter) LogInfof(ctx interface{}, format interface{}, args ...interface{}) *WailsLogger_LogInfof_Call {
	return &WailsLogger_LogInfof_Call{Call: _e.mock.On("LogInfof",
		append([]interface{}{ctx, format}, args...)...)}
}

func (_c *WailsLogger_LogInfof_Call) Run(run func(ctx context.Context, format string, args ...interface{})) *WailsLogger_LogInfof_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *WailsLogger_LogInfof_Call) Return() *WailsLogger_LogInfof_Call {
	_c.Call.Return()
	return _c
}

func (_c *WailsLogger_LogInfof_Call) RunAndReturn(run func(context.Context, string, ...interface{})) *WailsLogger_LogInfof_Call {
	_c.Call.Return(run)
	return _c
}

// LogPrint provides a mock function with given fields: ctx, message
func (_m *WailsLogger) LogPrint(ctx context.Context, message string) {
	_m.Called(ctx, message)
}

// WailsLogger_LogPrint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogPrint'
type WailsLogger_LogPrint_Call struct {
	*mock.Call
}

// LogPrint is a helper method to define mock.On call
//   - ctx context.Context
//   - message string
func (_e *WailsLogger_Expecter) LogPrint(ctx interface{}, message interface{}) *WailsLogger_LogPrint_Call {
	return &WailsLogger_LogPrint_Call{Call: _e.mock.On("LogPrint", ctx, message)}
}

func (_c *WailsLogger_LogPrint_Call) Run(run func(ctx context.Context, message string)) *WailsLogger_LogPrint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *WailsLogger_LogPrint_Call) Return() *WailsLogger_LogPrint_Call {
	_c.Call.Return()
	return _c
}

func (_c *WailsLogger_LogPrint_Call) RunAndReturn(run func(context.Context, string)) *WailsLogger_LogPrint_Call {
	_c.Call.Return(run)
	return _c
}

// LogPrintf provides a mock function with given fields: ctx, format, args
func (_m *WailsLogger) LogPrintf(ctx context.Context, format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// WailsLogger_LogPrintf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogPrintf'
type WailsLogger_LogPrintf_Call struct {
	*mock.Call
}

// LogPrintf is a helper method to define mock.On call
//   - ctx context.Context
//   - format string
//   - args ...interface{}
func (_e *WailsLogger_Expecter) LogPrintf(ctx interface{}, format interface{}, args ...interface{}) *WailsLogger_LogPrintf_Call {
	return &WailsLogger_LogPrintf_Call{Call: _e.mock.On("LogPrintf",
		append([]interface{}{ctx, format}, args...)...)}
}

func (_c *WailsLogger_LogPrintf_Call) Run(run func(ctx context.Context, format string, args ...interface{})) *WailsLogger_LogPrintf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *WailsLogger_LogPrintf_Call) Return() *WailsLogger_LogPrintf_Call {
	_c.Call.Return()
	return _c
}

func (_c *WailsLogger_LogPrintf_Call) RunAndReturn(run func(context.Context, string, ...interface{})) *WailsLogger_LogPrintf_Call {
	_c.Call.Return(run)
	return _c
}

// LogTrace provides a mock function with given fields: ctx, message
func (_m *WailsLogger) LogTrace(ctx context.Context, message string) {
	_m.Called(ctx, message)
}

// WailsLogger_LogTrace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogTrace'
type WailsLogger_LogTrace_Call struct {
	*mock.Call
}

// LogTrace is a helper method to define mock.On call
//   - ctx context.Context
//   - message string
func (_e *WailsLogger_Expecter) LogTrace(ctx interface{}, message interface{}) *WailsLogger_LogTrace_Call {
	return &WailsLogger_LogTrace_Call{Call: _e.mock.On("LogTrace", ctx, message)}
}

func (_c *WailsLogger_LogTrace_Call) Run(run func(ctx context.Context, message string)) *WailsLogger_LogTrace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *WailsLogger_LogTrace_Call) Return() *WailsLogger_LogTrace_Call {
	_c.Call.Return()
	return _c
}

func (_c *WailsLogger_LogTrace_Call) RunAndReturn(run func(context.Context, string)) *WailsLogger_LogTrace_Call {
	_c.Call.Return(run)
	return _c
}

// LogTracef provides a mock function with given fields: ctx, format, args
func (_m *WailsLogger) LogTracef(ctx context.Context, format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// WailsLogger_LogTracef_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogTracef'
type WailsLogger_LogTracef_Call struct {
	*mock.Call
}

// LogTracef is a helper method to define mock.On call
//   - ctx context.Context
//   - format string
//   - args ...interface{}
func (_e *WailsLogger_Expecter) LogTracef(ctx interface{}, format interface{}, args ...interface{}) *WailsLogger_LogTracef_Call {
	return &WailsLogger_LogTracef_Call{Call: _e.mock.On("LogTracef",
		append([]interface{}{ctx, format}, args...)...)}
}

func (_c *WailsLogger_LogTracef_Call) Run(run func(ctx context.Context, format string, args ...interface{})) *WailsLogger_LogTracef_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *WailsLogger_LogTracef_Call) Return() *WailsLogger_LogTracef_Call {
	_c.Call.Return()
	return _c
}

func (_c *WailsLogger_LogTracef_Call) RunAndReturn(run func(context.Context, string, ...interface{})) *WailsLogger_LogTracef_Call {
	_c.Call.Return(run)
	return _c
}

// LogWarning provides a mock function with given fields: ctx, message
func (_m *WailsLogger) LogWarning(ctx context.Context, message string) {
	_m.Called(ctx, message)
}

// WailsLogger_LogWarning_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogWarning'
type WailsLogger_LogWarning_Call struct {
	*mock.Call
}

// LogWarning is a helper method to define mock.On call
//   - ctx context.Context
//   - message string
func (_e *WailsLogger_Expecter) LogWarning(ctx interface{}, message interface{}) *WailsLogger_LogWarning_Call {
	return &WailsLogger_LogWarning_Call{Call: _e.mock.On("LogWarning", ctx, message)}
}

func (_c *WailsLogger_LogWarning_Call) Run(run func(ctx context.Context, message string)) *WailsLogger_LogWarning_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *WailsLogger_LogWarning_Call) Return() *WailsLogger_LogWarning_Call {
	_c.Call.Return()
	return _c
}

func (_c *WailsLogger_LogWarning_Call) RunAndReturn(run func(context.Context, string)) *WailsLogger_LogWarning_Call {
	_c.Call.Return(run)
	return _c
}

// LogWarningf provides a mock function with given fields: ctx, format, args
func (_m *WailsLogger) LogWarningf(ctx context.Context, format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// WailsLogger_LogWarningf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogWarningf'
type WailsLogger_LogWarningf_Call struct {
	*mock.Call
}

// LogWarningf is a helper method to define mock.On call
//   - ctx context.Context
//   - format string
//   - args ...interface{}
func (_e *WailsLogger_Expecter) LogWarningf(ctx interface{}, format interface{}, args ...interface{}) *WailsLogger_LogWarningf_Call {
	return &WailsLogger_LogWarningf_Call{Call: _e.mock.On("LogWarningf",
		append([]interface{}{ctx, format}, args...)...)}
}

func (_c *WailsLogger_LogWarningf_Call) Run(run func(ctx context.Context, format string, args ...interface{})) *WailsLogger_LogWarningf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *WailsLogger_LogWarningf_Call) Return() *WailsLogger_LogWarningf_Call {
	_c.Call.Return()
	return _c
}

func (_c *WailsLogger_LogWarningf_Call) RunAndReturn(run func(context.Context, string, ...interface{})) *WailsLogger_LogWarningf_Call {
	_c.Call.Return(run)
	return _c
}

// NewWailsLogger creates a new instance of WailsLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWailsLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *WailsLogger {
	mock := &WailsLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
