// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	blockpittxtype "github.com/tomvodi/cointracking-export-converter/internal/common/blockpittxtype"
	cointrackingtxtype "github.com/tomvodi/cointracking-export-converter/internal/common/cointrackingtxtype"

	common "github.com/tomvodi/cointracking-export-converter/internal/common"

	mock "github.com/stretchr/testify/mock"
)

// TxTypeManager is an autogenerated mock type for the TxTypeManager type
type TxTypeManager struct {
	mock.Mock
}

type TxTypeManager_Expecter struct {
	mock *mock.Mock
}

func (_m *TxTypeManager) EXPECT() *TxTypeManager_Expecter {
	return &TxTypeManager_Expecter{mock: &_m.Mock}
}

// BlockpitTxType provides a mock function with given fields: ctTxType
func (_m *TxTypeManager) BlockpitTxType(ctTxType cointrackingtxtype.CtTxType) (common.TxDisplayName, error) {
	ret := _m.Called(ctTxType)

	if len(ret) == 0 {
		panic("no return value specified for BlockpitTxType")
	}

	var r0 common.TxDisplayName
	var r1 error
	if rf, ok := ret.Get(0).(func(cointrackingtxtype.CtTxType) (common.TxDisplayName, error)); ok {
		return rf(ctTxType)
	}
	if rf, ok := ret.Get(0).(func(cointrackingtxtype.CtTxType) common.TxDisplayName); ok {
		r0 = rf(ctTxType)
	} else {
		r0 = ret.Get(0).(common.TxDisplayName)
	}

	if rf, ok := ret.Get(1).(func(cointrackingtxtype.CtTxType) error); ok {
		r1 = rf(ctTxType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TxTypeManager_BlockpitTxType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlockpitTxType'
type TxTypeManager_BlockpitTxType_Call struct {
	*mock.Call
}

// BlockpitTxType is a helper method to define mock.On call
//   - ctTxType cointrackingtxtype.CtTxType
func (_e *TxTypeManager_Expecter) BlockpitTxType(ctTxType interface{}) *TxTypeManager_BlockpitTxType_Call {
	return &TxTypeManager_BlockpitTxType_Call{Call: _e.mock.On("BlockpitTxType", ctTxType)}
}

func (_c *TxTypeManager_BlockpitTxType_Call) Run(run func(ctTxType cointrackingtxtype.CtTxType)) *TxTypeManager_BlockpitTxType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(cointrackingtxtype.CtTxType))
	})
	return _c
}

func (_c *TxTypeManager_BlockpitTxType_Call) Return(_a0 common.TxDisplayName, _a1 error) *TxTypeManager_BlockpitTxType_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TxTypeManager_BlockpitTxType_Call) RunAndReturn(run func(cointrackingtxtype.CtTxType) (common.TxDisplayName, error)) *TxTypeManager_BlockpitTxType_Call {
	_c.Call.Return(run)
	return _c
}

// BlockpitTxTypes provides a mock function with given fields:
func (_m *TxTypeManager) BlockpitTxTypes() ([]common.TxDisplayName, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BlockpitTxTypes")
	}

	var r0 []common.TxDisplayName
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]common.TxDisplayName, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []common.TxDisplayName); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.TxDisplayName)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TxTypeManager_BlockpitTxTypes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlockpitTxTypes'
type TxTypeManager_BlockpitTxTypes_Call struct {
	*mock.Call
}

// BlockpitTxTypes is a helper method to define mock.On call
func (_e *TxTypeManager_Expecter) BlockpitTxTypes() *TxTypeManager_BlockpitTxTypes_Call {
	return &TxTypeManager_BlockpitTxTypes_Call{Call: _e.mock.On("BlockpitTxTypes")}
}

func (_c *TxTypeManager_BlockpitTxTypes_Call) Run(run func()) *TxTypeManager_BlockpitTxTypes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TxTypeManager_BlockpitTxTypes_Call) Return(_a0 []common.TxDisplayName, _a1 error) *TxTypeManager_BlockpitTxTypes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TxTypeManager_BlockpitTxTypes_Call) RunAndReturn(run func() ([]common.TxDisplayName, error)) *TxTypeManager_BlockpitTxTypes_Call {
	_c.Call.Return(run)
	return _c
}

// GetMapping provides a mock function with given fields:
func (_m *TxTypeManager) GetMapping() ([]common.Ct2BpTxMapping, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMapping")
	}

	var r0 []common.Ct2BpTxMapping
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]common.Ct2BpTxMapping, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []common.Ct2BpTxMapping); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.Ct2BpTxMapping)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TxTypeManager_GetMapping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMapping'
type TxTypeManager_GetMapping_Call struct {
	*mock.Call
}

// GetMapping is a helper method to define mock.On call
func (_e *TxTypeManager_Expecter) GetMapping() *TxTypeManager_GetMapping_Call {
	return &TxTypeManager_GetMapping_Call{Call: _e.mock.On("GetMapping")}
}

func (_c *TxTypeManager_GetMapping_Call) Run(run func()) *TxTypeManager_GetMapping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TxTypeManager_GetMapping_Call) Return(_a0 []common.Ct2BpTxMapping, _a1 error) *TxTypeManager_GetMapping_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TxTypeManager_GetMapping_Call) RunAndReturn(run func() ([]common.Ct2BpTxMapping, error)) *TxTypeManager_GetMapping_Call {
	_c.Call.Return(run)
	return _c
}

// SetMapping provides a mock function with given fields: ctTxType, bpTxType
func (_m *TxTypeManager) SetMapping(ctTxType cointrackingtxtype.CtTxType, bpTxType blockpittxtype.BpTxType) error {
	ret := _m.Called(ctTxType, bpTxType)

	if len(ret) == 0 {
		panic("no return value specified for SetMapping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(cointrackingtxtype.CtTxType, blockpittxtype.BpTxType) error); ok {
		r0 = rf(ctTxType, bpTxType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TxTypeManager_SetMapping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMapping'
type TxTypeManager_SetMapping_Call struct {
	*mock.Call
}

// SetMapping is a helper method to define mock.On call
//   - ctTxType cointrackingtxtype.CtTxType
//   - bpTxType blockpittxtype.BpTxType
func (_e *TxTypeManager_Expecter) SetMapping(ctTxType interface{}, bpTxType interface{}) *TxTypeManager_SetMapping_Call {
	return &TxTypeManager_SetMapping_Call{Call: _e.mock.On("SetMapping", ctTxType, bpTxType)}
}

func (_c *TxTypeManager_SetMapping_Call) Run(run func(ctTxType cointrackingtxtype.CtTxType, bpTxType blockpittxtype.BpTxType)) *TxTypeManager_SetMapping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(cointrackingtxtype.CtTxType), args[1].(blockpittxtype.BpTxType))
	})
	return _c
}

func (_c *TxTypeManager_SetMapping_Call) Return(_a0 error) *TxTypeManager_SetMapping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TxTypeManager_SetMapping_Call) RunAndReturn(run func(cointrackingtxtype.CtTxType, blockpittxtype.BpTxType) error) *TxTypeManager_SetMapping_Call {
	_c.Call.Return(run)
	return _c
}

// NewTxTypeManager creates a new instance of TxTypeManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTxTypeManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *TxTypeManager {
	mock := &TxTypeManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
