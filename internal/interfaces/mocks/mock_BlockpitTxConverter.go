// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	common "github.com/tomvodi/cointracking-export-converter/internal/common"
	interfaces "github.com/tomvodi/cointracking-export-converter/internal/interfaces"

	mock "github.com/stretchr/testify/mock"
)

// BlockpitTxConverter is an autogenerated mock type for the BlockpitTxConverter type
type BlockpitTxConverter struct {
	mock.Mock
}

type BlockpitTxConverter_Expecter struct {
	mock *mock.Mock
}

func (_m *BlockpitTxConverter) EXPECT() *BlockpitTxConverter_Expecter {
	return &BlockpitTxConverter_Expecter{mock: &_m.Mock}
}

// FromCointrackingTx provides a mock function with given fields: ctTx
func (_m *BlockpitTxConverter) FromCointrackingTx(ctTx *common.CointrackingTx) ([]*interfaces.BlockpitTx, error) {
	ret := _m.Called(ctTx)

	if len(ret) == 0 {
		panic("no return value specified for FromCointrackingTx")
	}

	var r0 []*interfaces.BlockpitTx
	var r1 error
	if rf, ok := ret.Get(0).(func(*common.CointrackingTx) ([]*interfaces.BlockpitTx, error)); ok {
		return rf(ctTx)
	}
	if rf, ok := ret.Get(0).(func(*common.CointrackingTx) []*interfaces.BlockpitTx); ok {
		r0 = rf(ctTx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*interfaces.BlockpitTx)
		}
	}

	if rf, ok := ret.Get(1).(func(*common.CointrackingTx) error); ok {
		r1 = rf(ctTx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockpitTxConverter_FromCointrackingTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FromCointrackingTx'
type BlockpitTxConverter_FromCointrackingTx_Call struct {
	*mock.Call
}

// FromCointrackingTx is a helper method to define mock.On call
//   - ctTx *common.CointrackingTx
func (_e *BlockpitTxConverter_Expecter) FromCointrackingTx(ctTx interface{}) *BlockpitTxConverter_FromCointrackingTx_Call {
	return &BlockpitTxConverter_FromCointrackingTx_Call{Call: _e.mock.On("FromCointrackingTx", ctTx)}
}

func (_c *BlockpitTxConverter_FromCointrackingTx_Call) Run(run func(ctTx *common.CointrackingTx)) *BlockpitTxConverter_FromCointrackingTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*common.CointrackingTx))
	})
	return _c
}

func (_c *BlockpitTxConverter_FromCointrackingTx_Call) Return(_a0 []*interfaces.BlockpitTx, _a1 error) *BlockpitTxConverter_FromCointrackingTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BlockpitTxConverter_FromCointrackingTx_Call) RunAndReturn(run func(*common.CointrackingTx) ([]*interfaces.BlockpitTx, error)) *BlockpitTxConverter_FromCointrackingTx_Call {
	_c.Call.Return(run)
	return _c
}

// NewBlockpitTxConverter creates a new instance of BlockpitTxConverter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlockpitTxConverter(t interface {
	mock.TestingT
	Cleanup(func())
}) *BlockpitTxConverter {
	mock := &BlockpitTxConverter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
