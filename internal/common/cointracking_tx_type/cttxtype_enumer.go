// Code generated by "enumer -json -yaml -type=CtTxType"; DO NOT EDIT.

package cointracking_tx_type

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _CtTxTypeName = "TradeMarginTradeDerivativesFuturesTradeDepositIncomeGiftTipRewardBonusMiningAirdropAirdropNonTaxableStakingMasternodeMintingMiningCommercialDividendsIncomeLendingIncomeInterestIncomeDerivativesFuturesProfitMarginProfitOtherIncomeIncomeNonTaxableRemoveLiquidityReceiveLpTokenLpRewardsWithdrawalSpendDonationGiftStolenLostBorrowingFeeSettlementFeeMarginLossMarginFeeDerivativesFuturesLossOtherFeeOtherExpenseProvideLiquidityReturnLpTokenExpenseNonTaxableSwapNonTaxableReceiveLoanReceiveCollateralSendCollateralRepayLoanLiquidation"

var _CtTxTypeIndex = [...]uint16{0, 5, 16, 39, 46, 52, 59, 70, 76, 83, 100, 107, 117, 124, 140, 155, 168, 182, 206, 218, 229, 245, 260, 274, 283, 293, 298, 306, 310, 316, 320, 332, 345, 355, 364, 386, 394, 406, 422, 435, 452, 466, 477, 494, 508, 517, 528}

const _CtTxTypeLowerName = "trademargintradederivativesfuturestradedepositincomegifttiprewardbonusminingairdropairdropnontaxablestakingmasternodemintingminingcommercialdividendsincomelendingincomeinterestincomederivativesfuturesprofitmarginprofitotherincomeincomenontaxableremoveliquidityreceivelptokenlprewardswithdrawalspenddonationgiftstolenlostborrowingfeesettlementfeemarginlossmarginfeederivativesfutureslossotherfeeotherexpenseprovideliquidityreturnlptokenexpensenontaxableswapnontaxablereceiveloanreceivecollateralsendcollateralrepayloanliquidation"

func (i CtTxType) String() string {
	if i >= CtTxType(len(_CtTxTypeIndex)-1) {
		return fmt.Sprintf("CtTxType(%d)", i)
	}
	return _CtTxTypeName[_CtTxTypeIndex[i]:_CtTxTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _CtTxTypeNoOp() {
	var x [1]struct{}
	_ = x[Trade-(0)]
	_ = x[MarginTrade-(1)]
	_ = x[DerivativesFuturesTrade-(2)]
	_ = x[Deposit-(3)]
	_ = x[Income-(4)]
	_ = x[GiftTip-(5)]
	_ = x[RewardBonus-(6)]
	_ = x[Mining-(7)]
	_ = x[Airdrop-(8)]
	_ = x[AirdropNonTaxable-(9)]
	_ = x[Staking-(10)]
	_ = x[Masternode-(11)]
	_ = x[Minting-(12)]
	_ = x[MiningCommercial-(13)]
	_ = x[DividendsIncome-(14)]
	_ = x[LendingIncome-(15)]
	_ = x[InterestIncome-(16)]
	_ = x[DerivativesFuturesProfit-(17)]
	_ = x[MarginProfit-(18)]
	_ = x[OtherIncome-(19)]
	_ = x[IncomeNonTaxable-(20)]
	_ = x[RemoveLiquidity-(21)]
	_ = x[ReceiveLpToken-(22)]
	_ = x[LpRewards-(23)]
	_ = x[Withdrawal-(24)]
	_ = x[Spend-(25)]
	_ = x[Donation-(26)]
	_ = x[Gift-(27)]
	_ = x[Stolen-(28)]
	_ = x[Lost-(29)]
	_ = x[BorrowingFee-(30)]
	_ = x[SettlementFee-(31)]
	_ = x[MarginLoss-(32)]
	_ = x[MarginFee-(33)]
	_ = x[DerivativesFuturesLoss-(34)]
	_ = x[OtherFee-(35)]
	_ = x[OtherExpense-(36)]
	_ = x[ProvideLiquidity-(37)]
	_ = x[ReturnLpToken-(38)]
	_ = x[ExpenseNonTaxable-(39)]
	_ = x[SwapNonTaxable-(40)]
	_ = x[ReceiveLoan-(41)]
	_ = x[ReceiveCollateral-(42)]
	_ = x[SendCollateral-(43)]
	_ = x[RepayLoan-(44)]
	_ = x[Liquidation-(45)]
}

var _CtTxTypeValues = []CtTxType{Trade, MarginTrade, DerivativesFuturesTrade, Deposit, Income, GiftTip, RewardBonus, Mining, Airdrop, AirdropNonTaxable, Staking, Masternode, Minting, MiningCommercial, DividendsIncome, LendingIncome, InterestIncome, DerivativesFuturesProfit, MarginProfit, OtherIncome, IncomeNonTaxable, RemoveLiquidity, ReceiveLpToken, LpRewards, Withdrawal, Spend, Donation, Gift, Stolen, Lost, BorrowingFee, SettlementFee, MarginLoss, MarginFee, DerivativesFuturesLoss, OtherFee, OtherExpense, ProvideLiquidity, ReturnLpToken, ExpenseNonTaxable, SwapNonTaxable, ReceiveLoan, ReceiveCollateral, SendCollateral, RepayLoan, Liquidation}

var _CtTxTypeNameToValueMap = map[string]CtTxType{
	_CtTxTypeName[0:5]:          Trade,
	_CtTxTypeLowerName[0:5]:     Trade,
	_CtTxTypeName[5:16]:         MarginTrade,
	_CtTxTypeLowerName[5:16]:    MarginTrade,
	_CtTxTypeName[16:39]:        DerivativesFuturesTrade,
	_CtTxTypeLowerName[16:39]:   DerivativesFuturesTrade,
	_CtTxTypeName[39:46]:        Deposit,
	_CtTxTypeLowerName[39:46]:   Deposit,
	_CtTxTypeName[46:52]:        Income,
	_CtTxTypeLowerName[46:52]:   Income,
	_CtTxTypeName[52:59]:        GiftTip,
	_CtTxTypeLowerName[52:59]:   GiftTip,
	_CtTxTypeName[59:70]:        RewardBonus,
	_CtTxTypeLowerName[59:70]:   RewardBonus,
	_CtTxTypeName[70:76]:        Mining,
	_CtTxTypeLowerName[70:76]:   Mining,
	_CtTxTypeName[76:83]:        Airdrop,
	_CtTxTypeLowerName[76:83]:   Airdrop,
	_CtTxTypeName[83:100]:       AirdropNonTaxable,
	_CtTxTypeLowerName[83:100]:  AirdropNonTaxable,
	_CtTxTypeName[100:107]:      Staking,
	_CtTxTypeLowerName[100:107]: Staking,
	_CtTxTypeName[107:117]:      Masternode,
	_CtTxTypeLowerName[107:117]: Masternode,
	_CtTxTypeName[117:124]:      Minting,
	_CtTxTypeLowerName[117:124]: Minting,
	_CtTxTypeName[124:140]:      MiningCommercial,
	_CtTxTypeLowerName[124:140]: MiningCommercial,
	_CtTxTypeName[140:155]:      DividendsIncome,
	_CtTxTypeLowerName[140:155]: DividendsIncome,
	_CtTxTypeName[155:168]:      LendingIncome,
	_CtTxTypeLowerName[155:168]: LendingIncome,
	_CtTxTypeName[168:182]:      InterestIncome,
	_CtTxTypeLowerName[168:182]: InterestIncome,
	_CtTxTypeName[182:206]:      DerivativesFuturesProfit,
	_CtTxTypeLowerName[182:206]: DerivativesFuturesProfit,
	_CtTxTypeName[206:218]:      MarginProfit,
	_CtTxTypeLowerName[206:218]: MarginProfit,
	_CtTxTypeName[218:229]:      OtherIncome,
	_CtTxTypeLowerName[218:229]: OtherIncome,
	_CtTxTypeName[229:245]:      IncomeNonTaxable,
	_CtTxTypeLowerName[229:245]: IncomeNonTaxable,
	_CtTxTypeName[245:260]:      RemoveLiquidity,
	_CtTxTypeLowerName[245:260]: RemoveLiquidity,
	_CtTxTypeName[260:274]:      ReceiveLpToken,
	_CtTxTypeLowerName[260:274]: ReceiveLpToken,
	_CtTxTypeName[274:283]:      LpRewards,
	_CtTxTypeLowerName[274:283]: LpRewards,
	_CtTxTypeName[283:293]:      Withdrawal,
	_CtTxTypeLowerName[283:293]: Withdrawal,
	_CtTxTypeName[293:298]:      Spend,
	_CtTxTypeLowerName[293:298]: Spend,
	_CtTxTypeName[298:306]:      Donation,
	_CtTxTypeLowerName[298:306]: Donation,
	_CtTxTypeName[306:310]:      Gift,
	_CtTxTypeLowerName[306:310]: Gift,
	_CtTxTypeName[310:316]:      Stolen,
	_CtTxTypeLowerName[310:316]: Stolen,
	_CtTxTypeName[316:320]:      Lost,
	_CtTxTypeLowerName[316:320]: Lost,
	_CtTxTypeName[320:332]:      BorrowingFee,
	_CtTxTypeLowerName[320:332]: BorrowingFee,
	_CtTxTypeName[332:345]:      SettlementFee,
	_CtTxTypeLowerName[332:345]: SettlementFee,
	_CtTxTypeName[345:355]:      MarginLoss,
	_CtTxTypeLowerName[345:355]: MarginLoss,
	_CtTxTypeName[355:364]:      MarginFee,
	_CtTxTypeLowerName[355:364]: MarginFee,
	_CtTxTypeName[364:386]:      DerivativesFuturesLoss,
	_CtTxTypeLowerName[364:386]: DerivativesFuturesLoss,
	_CtTxTypeName[386:394]:      OtherFee,
	_CtTxTypeLowerName[386:394]: OtherFee,
	_CtTxTypeName[394:406]:      OtherExpense,
	_CtTxTypeLowerName[394:406]: OtherExpense,
	_CtTxTypeName[406:422]:      ProvideLiquidity,
	_CtTxTypeLowerName[406:422]: ProvideLiquidity,
	_CtTxTypeName[422:435]:      ReturnLpToken,
	_CtTxTypeLowerName[422:435]: ReturnLpToken,
	_CtTxTypeName[435:452]:      ExpenseNonTaxable,
	_CtTxTypeLowerName[435:452]: ExpenseNonTaxable,
	_CtTxTypeName[452:466]:      SwapNonTaxable,
	_CtTxTypeLowerName[452:466]: SwapNonTaxable,
	_CtTxTypeName[466:477]:      ReceiveLoan,
	_CtTxTypeLowerName[466:477]: ReceiveLoan,
	_CtTxTypeName[477:494]:      ReceiveCollateral,
	_CtTxTypeLowerName[477:494]: ReceiveCollateral,
	_CtTxTypeName[494:508]:      SendCollateral,
	_CtTxTypeLowerName[494:508]: SendCollateral,
	_CtTxTypeName[508:517]:      RepayLoan,
	_CtTxTypeLowerName[508:517]: RepayLoan,
	_CtTxTypeName[517:528]:      Liquidation,
	_CtTxTypeLowerName[517:528]: Liquidation,
}

var _CtTxTypeNames = []string{
	_CtTxTypeName[0:5],
	_CtTxTypeName[5:16],
	_CtTxTypeName[16:39],
	_CtTxTypeName[39:46],
	_CtTxTypeName[46:52],
	_CtTxTypeName[52:59],
	_CtTxTypeName[59:70],
	_CtTxTypeName[70:76],
	_CtTxTypeName[76:83],
	_CtTxTypeName[83:100],
	_CtTxTypeName[100:107],
	_CtTxTypeName[107:117],
	_CtTxTypeName[117:124],
	_CtTxTypeName[124:140],
	_CtTxTypeName[140:155],
	_CtTxTypeName[155:168],
	_CtTxTypeName[168:182],
	_CtTxTypeName[182:206],
	_CtTxTypeName[206:218],
	_CtTxTypeName[218:229],
	_CtTxTypeName[229:245],
	_CtTxTypeName[245:260],
	_CtTxTypeName[260:274],
	_CtTxTypeName[274:283],
	_CtTxTypeName[283:293],
	_CtTxTypeName[293:298],
	_CtTxTypeName[298:306],
	_CtTxTypeName[306:310],
	_CtTxTypeName[310:316],
	_CtTxTypeName[316:320],
	_CtTxTypeName[320:332],
	_CtTxTypeName[332:345],
	_CtTxTypeName[345:355],
	_CtTxTypeName[355:364],
	_CtTxTypeName[364:386],
	_CtTxTypeName[386:394],
	_CtTxTypeName[394:406],
	_CtTxTypeName[406:422],
	_CtTxTypeName[422:435],
	_CtTxTypeName[435:452],
	_CtTxTypeName[452:466],
	_CtTxTypeName[466:477],
	_CtTxTypeName[477:494],
	_CtTxTypeName[494:508],
	_CtTxTypeName[508:517],
	_CtTxTypeName[517:528],
}

// CtTxTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CtTxTypeString(s string) (CtTxType, error) {
	if val, ok := _CtTxTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _CtTxTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CtTxType values", s)
}

// CtTxTypeValues returns all values of the enum
func CtTxTypeValues() []CtTxType {
	return _CtTxTypeValues
}

// CtTxTypeStrings returns a slice of all String values of the enum
func CtTxTypeStrings() []string {
	strs := make([]string, len(_CtTxTypeNames))
	copy(strs, _CtTxTypeNames)
	return strs
}

// IsACtTxType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CtTxType) IsACtTxType() bool {
	for _, v := range _CtTxTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for CtTxType
func (i CtTxType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for CtTxType
func (i *CtTxType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("CtTxType should be a string, got %s", data)
	}

	var err error
	*i, err = CtTxTypeString(s)
	return err
}

// MarshalYAML implements a YAML Marshaler for CtTxType
func (i CtTxType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for CtTxType
func (i *CtTxType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = CtTxTypeString(s)
	return err
}
