// Code generated by "enumer -json -yaml -transform=lower -type=CsvLanguage"; DO NOT EDIT.

package csv_language

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _CsvLanguageName = "ende"

var _CsvLanguageIndex = [...]uint8{0, 2, 4}

const _CsvLanguageLowerName = "ende"

func (i CsvLanguage) String() string {
	if i >= CsvLanguage(len(_CsvLanguageIndex)-1) {
		return fmt.Sprintf("CsvLanguage(%d)", i)
	}
	return _CsvLanguageName[_CsvLanguageIndex[i]:_CsvLanguageIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _CsvLanguageNoOp() {
	var x [1]struct{}
	_ = x[En-(0)]
	_ = x[De-(1)]
}

var _CsvLanguageValues = []CsvLanguage{En, De}

var _CsvLanguageNameToValueMap = map[string]CsvLanguage{
	_CsvLanguageName[0:2]:      En,
	_CsvLanguageLowerName[0:2]: En,
	_CsvLanguageName[2:4]:      De,
	_CsvLanguageLowerName[2:4]: De,
}

var _CsvLanguageNames = []string{
	_CsvLanguageName[0:2],
	_CsvLanguageName[2:4],
}

// CsvLanguageString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CsvLanguageString(s string) (CsvLanguage, error) {
	if val, ok := _CsvLanguageNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _CsvLanguageNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CsvLanguage values", s)
}

// CsvLanguageValues returns all values of the enum
func CsvLanguageValues() []CsvLanguage {
	return _CsvLanguageValues
}

// CsvLanguageStrings returns a slice of all String values of the enum
func CsvLanguageStrings() []string {
	strs := make([]string, len(_CsvLanguageNames))
	copy(strs, _CsvLanguageNames)
	return strs
}

// IsACsvLanguage returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CsvLanguage) IsACsvLanguage() bool {
	for _, v := range _CsvLanguageValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for CsvLanguage
func (i CsvLanguage) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for CsvLanguage
func (i *CsvLanguage) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("CsvLanguage should be a string, got %s", data)
	}

	var err error
	*i, err = CsvLanguageString(s)
	return err
}

// MarshalYAML implements a YAML Marshaler for CsvLanguage
func (i CsvLanguage) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for CsvLanguage
func (i *CsvLanguage) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = CsvLanguageString(s)
	return err
}
