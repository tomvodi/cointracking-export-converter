// Code generated by "enumer -json -yaml -transform=snake -type=SwapHandling"; DO NOT EDIT.

package swap_handling

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _SwapHandlingName = "no_swap_handlingswap_non_taxableswap_to_trade"

var _SwapHandlingIndex = [...]uint8{0, 16, 32, 45}

const _SwapHandlingLowerName = "no_swap_handlingswap_non_taxableswap_to_trade"

func (i SwapHandling) String() string {
	if i >= SwapHandling(len(_SwapHandlingIndex)-1) {
		return fmt.Sprintf("SwapHandling(%d)", i)
	}
	return _SwapHandlingName[_SwapHandlingIndex[i]:_SwapHandlingIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _SwapHandlingNoOp() {
	var x [1]struct{}
	_ = x[NoSwapHandling-(0)]
	_ = x[SwapNonTaxable-(1)]
	_ = x[SwapToTrade-(2)]
}

var _SwapHandlingValues = []SwapHandling{NoSwapHandling, SwapNonTaxable, SwapToTrade}

var _SwapHandlingNameToValueMap = map[string]SwapHandling{
	_SwapHandlingName[0:16]:       NoSwapHandling,
	_SwapHandlingLowerName[0:16]:  NoSwapHandling,
	_SwapHandlingName[16:32]:      SwapNonTaxable,
	_SwapHandlingLowerName[16:32]: SwapNonTaxable,
	_SwapHandlingName[32:45]:      SwapToTrade,
	_SwapHandlingLowerName[32:45]: SwapToTrade,
}

var _SwapHandlingNames = []string{
	_SwapHandlingName[0:16],
	_SwapHandlingName[16:32],
	_SwapHandlingName[32:45],
}

// SwapHandlingString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SwapHandlingString(s string) (SwapHandling, error) {
	if val, ok := _SwapHandlingNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _SwapHandlingNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SwapHandling values", s)
}

// SwapHandlingValues returns all values of the enum
func SwapHandlingValues() []SwapHandling {
	return _SwapHandlingValues
}

// SwapHandlingStrings returns a slice of all String values of the enum
func SwapHandlingStrings() []string {
	strs := make([]string, len(_SwapHandlingNames))
	copy(strs, _SwapHandlingNames)
	return strs
}

// IsASwapHandling returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SwapHandling) IsASwapHandling() bool {
	for _, v := range _SwapHandlingValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for SwapHandling
func (i SwapHandling) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for SwapHandling
func (i *SwapHandling) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("SwapHandling should be a string, got %s", data)
	}

	var err error
	*i, err = SwapHandlingString(s)
	return err
}

// MarshalYAML implements a YAML Marshaler for SwapHandling
func (i SwapHandling) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for SwapHandling
func (i *SwapHandling) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = SwapHandlingString(s)
	return err
}
